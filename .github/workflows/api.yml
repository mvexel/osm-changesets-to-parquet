name: Update API Index

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-index:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          # Create gh-pages branch if it doesn't exist
          fetch-depth: 0

      - name: Setup gh-pages branch
        run: |
          if ! git show-ref --verify --quiet refs/heads/gh-pages; then
            git checkout --orphan gh-pages
            git rm -rf . || true
          else
            git checkout gh-pages
          fi

      - name: Generate API index
        run: |
          # Fetch all releases
          curl -s "https://api.github.com/repos/${{ github.repository }}/releases" > releases.json

          # Create index.json for API
          cat > index.json <<'EOF'
          {
            "repository": "${{ github.repository }}",
            "description": "OSM Changeset metadata in Parquet format",
            "updated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "latest": null,
            "files": []
          }
          EOF

          # Parse releases and create file list
          python3 - <<'PYTHON'
          import json
          import sys
          from datetime import datetime

          with open('releases.json') as f:
              releases = json.load(f)

          files = []
          latest = None

          for release in releases:
              if not release['tag_name'].startswith('data-'):
                  continue

              for asset in release['assets']:
                  file_info = {
                      'name': asset['name'],
                      'size': asset['size'],
                      'download_url': asset['browser_download_url'],
                      'created_at': asset['created_at'],
                      'release_tag': release['tag_name']
                  }
                  files.append(file_info)

                  # Track latest
                  if 'latest' in asset['name'] and latest is None:
                      latest = file_info

          # Sort by creation date, newest first
          files.sort(key=lambda x: x['created_at'], reverse=True)

          # Update index.json
          with open('index.json') as f:
              index = json.load(f)

          index['latest'] = latest
          index['files'] = files
          index['updated'] = datetime.utcnow().isoformat() + 'Z'

          with open('index.json', 'w') as f:
              json.dump(index, f, indent=2)

          print(f"Generated index with {len(files)} files")
          PYTHON

      - name: Create HTML index page
        run: |
          cat > index.html <<'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>OSM Changeset Data</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
                      max-width: 1200px;
                      margin: 0 auto;
                      padding: 2rem;
                      line-height: 1.6;
                  }
                  .latest {
                      background: #f0f9ff;
                      border: 2px solid #0284c7;
                      border-radius: 8px;
                      padding: 1.5rem;
                      margin: 2rem 0;
                  }
                  .file-list {
                      margin-top: 2rem;
                  }
                  .file {
                      background: #f9fafb;
                      border: 1px solid #e5e7eb;
                      border-radius: 6px;
                      padding: 1rem;
                      margin: 1rem 0;
                  }
                  .file-name {
                      font-weight: 600;
                      color: #1f2937;
                  }
                  .file-meta {
                      color: #6b7280;
                      font-size: 0.9rem;
                      margin-top: 0.5rem;
                  }
                  .download-btn {
                      background: #0284c7;
                      color: white;
                      padding: 0.5rem 1rem;
                      border-radius: 4px;
                      text-decoration: none;
                      display: inline-block;
                      margin-top: 0.5rem;
                  }
                  .download-btn:hover {
                      background: #0369a1;
                  }
                  code {
                      background: #f3f4f6;
                      padding: 0.2rem 0.4rem;
                      border-radius: 3px;
                      font-size: 0.9em;
                  }
                  pre {
                      background: #1f2937;
                      color: #f9fafb;
                      padding: 1rem;
                      border-radius: 6px;
                      overflow-x: auto;
                  }
              </style>
          </head>
          <body>
              <h1>OSM Changeset Data (Parquet)</h1>
              <p>OpenStreetMap changeset metadata converted to Parquet format. Updated hourly.</p>

              <div id="latest-container"></div>

              <h2>Usage</h2>
              <pre>
          # Download latest
          wget <span id="latest-url">...</span>
          gunzip changesets-latest.parquet.gz

          # Query with DuckDB
          duckdb -c "SELECT COUNT(*) FROM 'changesets-latest.parquet'"
          duckdb -c "SELECT * FROM 'changesets-latest.parquet' LIMIT 10"
              </pre>

              <h2>API</h2>
              <p>Machine-readable index: <a href="index.json">index.json</a></p>

              <h2>All Files</h2>
              <div id="files-container"></div>

              <script>
                  fetch('index.json')
                      .then(r => r.json())
                      .then(data => {
                          // Latest file
                          if (data.latest) {
                              const latest = data.latest;
                              document.getElementById('latest-container').innerHTML = `
                                  <div class="latest">
                                      <h2>Latest Version</h2>
                                      <div class="file-name">${latest.name}</div>
                                      <div class="file-meta">
                                          Size: ${(latest.size / 1024 / 1024).toFixed(2)} MB |
                                          Updated: ${new Date(latest.created_at).toLocaleString()}
                                      </div>
                                      <a href="${latest.download_url}" class="download-btn">Download</a>
                                  </div>
                              `;
                              document.getElementById('latest-url').textContent = latest.download_url;
                          }

                          // All files
                          const filesHtml = data.files.map(file => `
                              <div class="file">
                                  <div class="file-name">${file.name}</div>
                                  <div class="file-meta">
                                      Size: ${(file.size / 1024 / 1024).toFixed(2)} MB |
                                      Created: ${new Date(file.created_at).toLocaleString()} |
                                      Release: <code>${file.release_tag}</code>
                                  </div>
                                  <a href="${file.download_url}" class="download-btn">Download</a>
                              </div>
                          `).join('');
                          document.getElementById('files-container').innerHTML = filesHtml;

                          // Update footer
                          document.body.innerHTML += `
                              <footer style="margin-top: 3rem; padding-top: 2rem; border-top: 1px solid #e5e7eb; color: #6b7280;">
                                  <p>Last updated: ${new Date(data.updated).toLocaleString()}</p>
                                  <p>Source: <a href="https://github.com/${data.repository}">GitHub</a></p>
                              </footer>
                          `;
                      });
              </script>
          </body>
          </html>
          EOF

      - name: Create README
        run: |
          cat > README.md <<'EOF'
          # OSM Changeset Data API

          This is an automated data distribution system for OpenStreetMap changeset metadata in Parquet format.

          ## Quick Start

          ```bash
          # Download the latest file
          curl -L -o changesets-latest.parquet.gz \
            https://github.com/${{ github.repository }}/releases/latest/download/changesets-latest.parquet.gz

          # Extract
          gunzip changesets-latest.parquet.gz

          # Query with DuckDB
          duckdb -c "SELECT COUNT(*) FROM 'changesets-latest.parquet'"
          ```

          ## API

          ### Get Latest Release Info

          ```bash
          curl https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/index.json
          ```

          Response:
          ```json
          {
            "latest": {
              "name": "changesets-latest.parquet.gz",
              "size": 12345678,
              "download_url": "https://...",
              "created_at": "2025-01-15T10:30:00Z"
            },
            "files": [...]
          }
          ```

          ## Web Interface

          Visit: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/

          ## Update Frequency

          Data is checked hourly and updated when new changeset data is available from planet.osm.org.
          EOF

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add index.json index.html README.md
          git commit -m "Update API index - $(date -u +"%Y-%m-%d %H:%M:%S UTC")" || echo "No changes"
          git push origin gh-pages || (git push --set-upstream origin gh-pages)
