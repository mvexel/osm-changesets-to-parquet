name: Process OSM Changesets

on:
  schedule:
    # Run every hour at minute 5
    - cron: '5 * * * *'
  workflow_dispatch: # Allow manual triggering
    inputs:
      force:
        description: 'Force download and process even if file hasnt changed'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  check-and-process:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for new changeset file
        id: check
        run: |
          # Get the current Last-Modified header from the changesets file
          CURRENT_MODIFIED=$(curl -sI https://planet.osm.org/planet/changesets-latest.osm.bz2 | grep -i "last-modified" | cut -d' ' -f2-)
          echo "Current Last-Modified: $CURRENT_MODIFIED"
          echo "current_modified=$CURRENT_MODIFIED" >> $GITHUB_OUTPUT

          # Get the previously stored Last-Modified (if it exists)
          if [ -f .last-modified ]; then
            PREVIOUS_MODIFIED=$(cat .last-modified)
            echo "Previous Last-Modified: $PREVIOUS_MODIFIED"
          else
            PREVIOUS_MODIFIED=""
            echo "No previous Last-Modified found"
          fi

          # Check if we should process
          if [ "${{ github.event.inputs.force }}" = "true" ]; then
            echo "Force flag set - will process"
            echo "should_process=true" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_MODIFIED" != "$PREVIOUS_MODIFIED" ]; then
            echo "File has changed - will process"
            echo "should_process=true" >> $GITHUB_OUTPUT
          else
            echo "File unchanged - skipping"
            echo "should_process=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Rust
        if: steps.check.outputs.should_process == 'true'
        uses: dtolnay/rust-toolchain@stable

      - name: Build release binary
        if: steps.check.outputs.should_process == 'true'
        run: cargo build --release

      - name: Download changeset file
        if: steps.check.outputs.should_process == 'true'
        run: |
          echo "Downloading changesets-latest.osm.bz2..."
          curl -L -o changesets-latest.osm.bz2 https://planet.osm.org/planet/changesets-latest.osm.bz2
          ls -lh changesets-latest.osm.bz2

      - name: Convert to Parquet
        if: steps.check.outputs.should_process == 'true'
        run: |
          echo "Converting to Parquet..."
          TIMESTAMP=$(date +%y%m%d-%H%M)
          ./target/release/changesets-to-parquet \
            --input changesets-latest.osm.bz2 \
            --output changesets-${TIMESTAMP}.parquet

          # Also create a "latest" symlink copy
          cp changesets-${TIMESTAMP}.parquet changesets-latest.parquet

          ls -lh changesets-*.parquet
          echo "output_file=changesets-${TIMESTAMP}.parquet" >> $GITHUB_ENV
          echo "timestamp=${TIMESTAMP}" >> $GITHUB_ENV

      - name: Compress Parquet file
        if: steps.check.outputs.should_process == 'true'
        run: |
          # Parquet files compress well with general compression
          gzip -k ${{ env.output_file }}
          gzip -k changesets-latest.parquet
          ls -lh *.parquet.gz

      - name: Update Last-Modified tracking
        if: steps.check.outputs.should_process == 'true'
        run: |
          echo "${{ steps.check.outputs.current_modified }}" > .last-modified
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .last-modified
          git commit -m "Update last-modified timestamp: ${{ env.timestamp }}" || echo "No changes to commit"
          git push || echo "Nothing to push"

      - name: Upload to GitHub Release
        if: steps.check.outputs.should_process == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: data-${{ env.timestamp }}
          name: Changeset Data ${{ env.timestamp }}
          body: |
            OSM Changeset data processed on $(date -u +"%Y-%m-%d %H:%M:%S UTC")

            Source: https://planet.osm.org/planet/changesets-latest.osm.bz2
            Last-Modified: ${{ steps.check.outputs.current_modified }}

            Files:
            - `changesets-${{ env.timestamp }}.parquet.gz` - Timestamped version
            - `changesets-latest.parquet.gz` - Always points to the latest version

            Download and query with DuckDB:
            ```bash
            # Download
            wget https://github.com/${{ github.repository }}/releases/download/data-${{ env.timestamp }}/changesets-latest.parquet.gz
            gunzip changesets-latest.parquet.gz

            # Query with DuckDB
            duckdb -c "SELECT COUNT(*) FROM 'changesets-latest.parquet'"
            ```
          files: |
            ${{ env.output_file }}.gz
            changesets-latest.parquet.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: |
          rm -f changesets-latest.osm.bz2
          rm -f changesets-*.parquet
          rm -f changesets-*.parquet.gz
